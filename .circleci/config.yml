version: 2.1

workflows:
  version: 2
  test-and-deploy:
    jobs:
      - test-3-10:
          filters:
            tags:
              only: /.*/

      - test-3-9:
          filters:
            tags:
              only: /.*/

      - test-3-8:
          filters:
            tags:
              only: /.*/

      - test-3-7:
          filters:
            tags:
              only: /.*/

      - image-push:
          filters:
            #branches:
            #  only: /(master|main)/
            #tags:
            #  only: /^[0-9]+(\.[0-9]+)*$/
            tags:
              only: /.*/
          requires:
            - test-3-10
            - test-3-9
            - test-3-8
            - test-3-7

      - deploy:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+(\.[0-9]+)*$/
          requires:
            - test-3-10
            - test-3-9
            - test-3-8
            - test-3-7

jobs:
  test-3-10:
    docker:
      - image: circleci/python:3.10
    steps:
      - checkout
      - prepare
      - bootstrapping-test
      - unit-test
      - example-test
      - document-build

  test-3-9:
    docker:
      - image: circleci/python:3.9
    steps:
      - checkout
      - prepare
      - bootstrapping-test
      - unit-test
      - example-test
      - document-build

  test-3-8:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - prepare
      - bootstrapping-test
      - unit-test
      - example-test
      - document-build

  test-3-7:
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout
      - prepare
      - bootstrapping-test
      - unit-test
      - example-test
      - document-build

  image-push:
    docker:
      - image: circleci/python:3.10
    steps:
      - checkout
      - docker-image-build-push

  deploy:
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout
      - prepare
      - run:
          name: Publish
          command: |
            poetry build
            poetry publish

commands:
  prepare:
    description: Prepare
    steps:
      - run:
          name: Install Poetry
          command: curl -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py | python

  bootstrapping-test:
    description: Bootstrapping test
    steps:
      - run:
          name: Bootstrapping test
          command: |
            poetry install --no-dev
            poetry run preacher-cli --version
            poetry run preacher-cli --help

  unit-test:
    description: Unit test
    steps:
      - run:
          name: Unit test
          command: |
            poetry install
            poetry run pytest
            poetry run black --check preacher tests examples docs
      - run:
          name: Report
          command: |
            poetry run codecov

  example-test:
    description: Example test
    steps:
      - run:
          name: Example test
          command: |
            poetry install
            poetry run python3 examples/server.py > examples/server.log 2>&1 &
            sleep 5

            # Run normal scenarios.
            poetry run preacher-cli \
              -vv \
              -uhttp://localhost:5000 \
              -Rreport/ \
              ./examples/scenario/success.yml

            # Run plugin scenarios.
            poetry run preacher-cli \
              -vv \
              -uhttp://localhost:5000 \
              -pexamples/plugin/custom_matcher.py \
              ./examples/scenario/plugin.yml

            # Run plugin scenarios with installation.
            poetry run pip install ./examples/plugin
            poetry run preacher-cli \
              -vv \
              -uhttp://localhost:5000 \
              ./examples/scenario/plugin.yml

            ls report/
            cat examples/server.log

  document-build:
    description: Build documents
    steps:
      - run:
          name: Build documents
          command: |
            poetry install
            poetry run make html

  docker-image-build-push:
    description: Build the Docker image and push it
    steps:
      - setup_remote_docker:
          version: 20.10.11
      - run:
          name: Install aws-cli to push the image into ECR
          command: |
            pip install awscli==1.22.72
      - run:
          name: Install Docker Buildx
          command: |
            mkdir -vp ~/.docker/cli-plugins/
            curl -sL "https://github.com/docker/buildx/releases/download/v0.8.0/buildx-v0.8.0.linux-amd64" > ~/.docker/cli-plugins/docker-buildx
            chmod a+x ~/.docker/cli-plugins/docker-buildx

            sudo apt-get update && sudo apt-get install -y binfmt-support qemu-user-static
            docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
            docker run --privileged --rm tonistiigi/binfmt --install arm64

            docker context create buildcontext
            docker buildx create buildcontext --use

      - run:
          name: Build Docker image
          command: |
            docker buildx build --platform=linux/arm64/v8,linux/amd64 -t preacher .
      - run:
          name: Push Docker image
          command: |
            IMAGE_TAG=latest
            if [[ -n "${CIRCLE_TAG}" ]]; then
              IMAGE_TAG="${CIRCLE_TAG}"
            fi
            echo "${IMAGE_TAG}"
            export IMAGE_TAG

            DOCKER_HUB_IMAGE="ymoch/preacher:${IMAGE_TAG}"
            docker tag preacher "${DOCKER_HUB_IMAGE}"
            echo "${DOCKER_HUB_PASSWORD}" | docker login --username "${DOCKER_HUB_USERNAME}" --password-stdin
            docker push "${DOCKER_HUB_IMAGE}"

            ECR_PUBLIC_IMAGE="public.ecr.aws/ymoch/preacher:${IMAGE_TAG}"
            docker tag preacher "${ECR_PUBLIC_IMAGE}"
            aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/ymoch
            docker push "${ECR_PUBLIC_IMAGE}"
